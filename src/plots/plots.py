import pandas as pd
import plotly.graph_objs as go

def bar_plot_for_categorical_variable_v(
    question: str,
    df: pd.DataFrame,
    categorical_variable: str,
    numeric_variable: str,
    agg_func: str,
    title: str,
    xlabel: str,
    ylabel: str
) -> go.Figure:
    """
    This function generates the bar plot visualization of two variables (categorical and numeric) 
    based parameters passed to the function. Function will return the visualization which will
    be used to answer the question generated by the visualization and domain expert.


    Parameters/Arguments:
        - question 
            datatype: string
            description: Question which can be answered using the visualization
        - df 
            datatype: string
            description: Pandas dataframe object
        - categorical_variable 
            datatype: string
            description: Name of the categorical column to be used in x-axis
        - numeric_variable 
            datatype: string 
            description: Name of the numeric column which will be aggregated 
            populating y-axis based on agg_func
        - agg_func 
            datatype: string
            accepted values:  ['min', 'max', 'sum', 'mean', 'count']
            description: Aggregated function to be used for the aggregation of numeric variable
        - title 
            datatype: string
            description: Title of the plot
        - xlabel 
            datatype: string
            description: Label to be used in the x-axis
        - ylabel 
            datatype: string
            description: Label to be used in the y-axix

    Return:
        go.Figure
    
    """    
    cols = df.columns
    df.columns = [col.upper() for col in cols]
    categorical_variable = categorical_variable.upper()
    numeric_variable = numeric_variable.upper()

    # Step 1: Aggregate the data
    aggregated_data = df.groupby(categorical_variable)[numeric_variable].agg(agg_func).reset_index()
    
    # Step 2: Create the bar plot
    fig = go.Figure(data=go.Bar(x=aggregated_data[categorical_variable], y=aggregated_data[numeric_variable]))
    
    # Step 3: Set the title, xlabel, ylabel
    fig.update_layout(title=title, xaxis_title=xlabel, yaxis_title=ylabel)
    
    # Step 4: Use the 'plotly_dark' theme template
    fig.update_layout(template='plotly_dark')
    
    # Step 5: Return the go.Figure object
    return fig

def scatter_plot_two_variables(
    question: str,
    df: pd.DataFrame,
    x_numeric_variable: str,
    y_numeric_variable: str,
    title: str,
    xlabel: str,
    ylabel: str
) -> go.Figure:
    """
    This function generates the scatter plot visualization of two numeric variables based
    parameters passed to the function. Function will return the visualization which will
    be used to answer the question generated by the visualization and domain expert.
    
    Parameters/Arguments:
        - question 
            datatype: string
            description: Question which can be answered using the visualization
        - df 
            datatype: (pandas.DataFrame)
            description: Pandas dataframe object
        - x_numeric_variable 
            datatype: string
            description: Numeric variable to be used in x-axis
        - y_numeric_variable 
            datatype: string
            description: Numeric variable to be used in y-axis
        - title 
            datatype: string
            description: Title of the plot
        - xlabel 
            datatype: string
            description: Label to be used in the x-axis
        - ylabel 
            datatype: string
            description: Label to be used in the y-axix

    Returns:
        go.Figure

    """    
    cols = df.columns
    df.columns = [col.upper() for col in cols]
    x_numeric_variable = x_numeric_variable.upper()
    y_numeric_variable = y_numeric_variable.upper()

    fig = go.Figure()

    # Step 1: Create a scatter plotly using plotly graph objects
    fig.add_trace(go.Scatter(
        x=df[x_numeric_variable],
        y=df[y_numeric_variable],
        mode='markers'
    ))
    
    # Step 2: Set the title, xlabel, ylabel for the plot
    fig.update_layout(
        title=title,
        xaxis_title=xlabel,
        yaxis_title=ylabel
    )
    
    # Step 3: Use the user defined custom theme from the get_custom_theme function
    fig.update_layout(template='plotly_dark')
    
    # Step 4: Return the go.Figure object
    return fig

def get_custom_theme():
    # Define your custom theme here
    custom_theme = {
        "layout": {
            "font": {
                "family": "Arial, sans-serif",
                "size": 14,
                "color": "#333333"
            },
            "plot_bgcolor": "#F5F5F5",
            "paper_bgcolor": "#FFFFFF",
            "title": {
                "font": {
                    "size": 18,
                    "color": "#000000"
                }
            }
        }
    }
    
    return custom_theme